{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Component","RealmContext","createContext","RealmProvider","id","render","remember","children","app","useState","user","setUser","customData","setCustomData","Boolean","loading","setLoading","mongo","useMemo","register","useCallback","onRegister","resetPassword","onResetPassword","confirm","onConfirm","login","creds","onLogin","logout","onLogout","refreshCustomData","callFunction","args","context","isLoggedIn","value","App","realm","WrappedRealmUser","RealmApp","useContext","RealmReceiver","RealmBody","recent","setRecent","useEffect","fetch","then","r","text","ip","a","db","collection","insertOne","realmId","ts","Date","replace","aggregate","$sort","$group","_id","$first","res","map","onClick","i","key","toString","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.615f16df.chunk.js","sourcesContent":["import React, { createContext, useCallback, useMemo, useRef, useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\n\r\nexport const RealmContext = createContext({});\r\n\r\nexport const RealmProvider = ({ id, render=null, remember=true, children=null }) => {\r\n    const app = useRef(new Realm.App ({ id })).current;\r\n    const [ user, setUser ] = useState(remember && app.currentUser);\r\n    const [ customData, setCustomData ] = useState(user && user.customData);\r\n    const [ loading, setLoading ] = useState(Boolean(user));\r\n    const mongo = useMemo(() => user && user.mongoClient('mongodb-atlas'), [user]);\r\n\r\n    const register = useCallback(async (email, password, onRegister=null) => {\r\n        const registration = await app.emailPasswordAuth.registerUser(email, password);\r\n        if (onRegister) await onRegister(registration);\r\n        return registration;\r\n    }, []);\r\n\r\n    const resetPassword = useCallback(async (token, tokenId, password, onResetPassword=null) => {\r\n        const reset = await app.emailPasswordAuth.resetPassword(token, tokenId, password);\r\n        if (onResetPassword) await onResetPassword(reset);\r\n        return reset;\r\n    }, []);\r\n\r\n    const confirm = useCallback(async (token, tokenId, onConfirm=null) => {\r\n        const confirmation = await app.emailPasswordAuth.confirmUser(token, tokenId);\r\n        if (onConfirm) await onConfirm(confirmation);\r\n        return confirmation;\r\n    }, []);\r\n\r\n    const login = useCallback(async (how, ...creds) => {\r\n        setLoading(true);\r\n        const onLogin = ('function' === typeof creds[creds.length-1]) && creds.pop();\r\n        const user = await app.logIn(Realm.Credentials[how](...creds)).catch((error) => {\r\n            setLoading(false);\r\n            throw error;\r\n        });\r\n\r\n        if (onLogin) await onLogin(user).catch((error) => {\r\n            setLoading(false);\r\n            throw error;\r\n        });\r\n\r\n        return await user.refreshCustomData().then(() => {\r\n            setCustomData(user.customData);\r\n            setUser(user);\r\n            setLoading(false);\r\n            return user;\r\n        }).catch((error) => {\r\n            setLoading(false);\r\n            throw error;\r\n        });\r\n    }, []);\r\n\r\n    const logout = useCallback(async (onLogout=null) => {\r\n        return app.currentUser && app.currentUser.logOut().then(() => {\r\n            setUser();\r\n            return onLogout && onLogout();\r\n        });\r\n    }, []);\r\n\r\n    const refreshCustomData = useCallback(() => user.refreshCustomData().then(() => setCustomData(user.customData)), [user]);\r\n\r\n    const callFunction = useCallback((func, ...args) => user.functions[func](...args), [user]);\r\n\r\n    const context = {\r\n        app,\r\n        loading,\r\n        user,\r\n        customData,\r\n        mongo,\r\n        isLoggedIn: Boolean(user),\r\n        login,\r\n        logout,\r\n        register,\r\n        confirm,\r\n        resetPassword,\r\n        callFunction,\r\n        refreshCustomData,\r\n    };\r\n\r\n    return (\r\n        <RealmContext.Provider value={context}>\r\n            {render ? render(context) : children}\r\n        </RealmContext.Provider>\r\n    );\r\n};\r\n\r\nexport const withRealm = (Component) => {\r\n    return ({ id }) => <RealmProvider id={id} render={(realm) => <Component realm={realm}/>}/>;\r\n};","import React, { useContext, useEffect, useState } from 'react';\nimport { RealmProvider, RealmContext, withRealm } from 'react-realm-provider';\n\nconst id = 'react-realm-provider-sandbox-wzhse';\n\nconst App = () => {\n    return (\n        <>\n            <RealmProvider id={id}>\n                <RealmApp/>\n            </RealmProvider>\n            <hr/>\n            <RealmProvider id={id} render={(realm) => <RealmReceiver realm={realm}/>}/>\n            <hr/>\n            <WrappedRealmUser id={id}/>\n        </>\n    )\n};\n\nexport default App;\n\nconst RealmApp = () => {\n    const { isLoggedIn, loading, login, logout, user, mongo } = useContext(RealmContext);\n    return <RealmBody {...{isLoggedIn, loading, login, logout, user, mongo}} />;\n};\n\nconst RealmReceiver = ({ realm }) => {\n    const { isLoggedIn, loading, login, logout, user, mongo } = useContext(RealmContext);\n    return <RealmBody {...{isLoggedIn, loading, login, logout, user, mongo}} />;\n};\n\nconst WrappedRealmUser = withRealm(RealmReceiver);\n\nconst RealmBody = ({ isLoggedIn, loading, login, logout, user, mongo }) => {\n    const [ recent, setRecent ] = useState([]);\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            fetch('https://api.ipify.org/').then((r) => r.text()).then(async (ip) => {\n                await mongo.db('react_realm_provider').collection('sample').insertOne({ realmId: user.id, ts: new Date (), ip: ip.replace(/\\d+$/, '0/24') })\n                await mongo.db('react_realm_provider').collection('sample').aggregate([\n                    { $sort: { 'ts': -1 } },\n                    { $group: { _id: '$ip', ts: { $first: '$ts' } } },\n                ]).then((res) => setRecent(res.map(({ _id, ts }) => ({ ip: _id, ts }))));\n            });\n        }\n    }, [isLoggedIn, mongo]);\n\n    return (\n        <div>\n            {isLoggedIn ? (\n                <div><button onClick={() => logout()}>Log Out of Realm</button></div>\n            ) : (\n                <div><button onClick={() => login('anonymous')}>Log In to Realm</button></div>\n            )}\n            {loading && (\n                <div>Logging in...</div>\n            )}\n            {isLoggedIn && (\n                <div>\n                    <div>Thank you for logging in, user!</div>\n                    <div>\n                        {recent && recent.map(({ ts, ip }, i) => <div key={i}>{ts.toString()} &mdash; {ip}</div>)}\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n};","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}